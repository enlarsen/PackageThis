//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace PackageThis {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("Content")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Content : System.Data.DataSet {
        
        private ItemDataTable tableItem;
        
        private ItemInstanceDataTable tableItemInstance;
        
        private PictureDataTable tablePicture;
        
        private System.Data.DataRelation relationFK_Item_ItemInstance;
        
        private System.Data.DataRelation relationFK_Item_Picture;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Content() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Content(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Item"] != null)) {
                    base.Tables.Add(new ItemDataTable(ds.Tables["Item"]));
                }
                if ((ds.Tables["ItemInstance"] != null)) {
                    base.Tables.Add(new ItemInstanceDataTable(ds.Tables["ItemInstance"]));
                }
                if ((ds.Tables["Picture"] != null)) {
                    base.Tables.Add(new PictureDataTable(ds.Tables["Picture"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ItemDataTable Item {
            get {
                return this.tableItem;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ItemInstanceDataTable ItemInstance {
            get {
                return this.tableItemInstance;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PictureDataTable Picture {
            get {
                return this.tablePicture;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            Content cln = ((Content)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Item"] != null)) {
                    base.Tables.Add(new ItemDataTable(ds.Tables["Item"]));
                }
                if ((ds.Tables["ItemInstance"] != null)) {
                    base.Tables.Add(new ItemInstanceDataTable(ds.Tables["ItemInstance"]));
                }
                if ((ds.Tables["Picture"] != null)) {
                    base.Tables.Add(new PictureDataTable(ds.Tables["Picture"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableItem = ((ItemDataTable)(base.Tables["Item"]));
            if ((initTable == true)) {
                if ((this.tableItem != null)) {
                    this.tableItem.InitVars();
                }
            }
            this.tableItemInstance = ((ItemInstanceDataTable)(base.Tables["ItemInstance"]));
            if ((initTable == true)) {
                if ((this.tableItemInstance != null)) {
                    this.tableItemInstance.InitVars();
                }
            }
            this.tablePicture = ((PictureDataTable)(base.Tables["Picture"]));
            if ((initTable == true)) {
                if ((this.tablePicture != null)) {
                    this.tablePicture.InitVars();
                }
            }
            this.relationFK_Item_ItemInstance = this.Relations["FK_Item_ItemInstance"];
            this.relationFK_Item_Picture = this.Relations["FK_Item_Picture"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Content";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Content.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableItem = new ItemDataTable();
            base.Tables.Add(this.tableItem);
            this.tableItemInstance = new ItemInstanceDataTable();
            base.Tables.Add(this.tableItemInstance);
            this.tablePicture = new PictureDataTable();
            base.Tables.Add(this.tablePicture);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("FK_Item_ItemInstance", new System.Data.DataColumn[] {
                        this.tableItem.ContentIdColumn}, new System.Data.DataColumn[] {
                        this.tableItemInstance.ContentIdColumn});
            this.tableItemInstance.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Item_Picture", new System.Data.DataColumn[] {
                        this.tableItem.ContentIdColumn}, new System.Data.DataColumn[] {
                        this.tablePicture.ContentIdColumn});
            this.tablePicture.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationFK_Item_ItemInstance = new System.Data.DataRelation("FK_Item_ItemInstance", new System.Data.DataColumn[] {
                        this.tableItem.ContentIdColumn}, new System.Data.DataColumn[] {
                        this.tableItemInstance.ContentIdColumn}, false);
            this.Relations.Add(this.relationFK_Item_ItemInstance);
            this.relationFK_Item_Picture = new System.Data.DataRelation("FK_Item_Picture", new System.Data.DataColumn[] {
                        this.tableItem.ContentIdColumn}, new System.Data.DataColumn[] {
                        this.tablePicture.ContentIdColumn}, false);
            this.Relations.Add(this.relationFK_Item_Picture);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeItem() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeItemInstance() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePicture() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            Content ds = new Content();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ItemRowChangeEventHandler(object sender, ItemRowChangeEvent e);
        
        public delegate void ItemInstanceRowChangeEventHandler(object sender, ItemInstanceRowChangeEvent e);
        
        public delegate void PictureRowChangeEventHandler(object sender, PictureRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ItemDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnContentId;
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnVersionId;
            
            private System.Data.DataColumn columnAssetId;
            
            private System.Data.DataColumn columnPictures;
            
            private System.Data.DataColumn columnSize;
            
            private System.Data.DataColumn columnMetadata;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemDataTable() {
                this.TableName = "Item";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItemDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ItemDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContentIdColumn {
                get {
                    return this.columnContentId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VersionIdColumn {
                get {
                    return this.columnVersionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AssetIdColumn {
                get {
                    return this.columnAssetId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PicturesColumn {
                get {
                    return this.columnPictures;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MetadataColumn {
                get {
                    return this.columnMetadata;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow this[int index] {
                get {
                    return ((ItemRow)(this.Rows[index]));
                }
            }
            
            public event ItemRowChangeEventHandler ItemRowChanging;
            
            public event ItemRowChangeEventHandler ItemRowChanged;
            
            public event ItemRowChangeEventHandler ItemRowDeleting;
            
            public event ItemRowChangeEventHandler ItemRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddItemRow(ItemRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow AddItemRow(string ContentId, string Title, string VersionId, string AssetId, short Pictures, int Size, string Metadata) {
                ItemRow rowItemRow = ((ItemRow)(this.NewRow()));
                rowItemRow.ItemArray = new object[] {
                        ContentId,
                        Title,
                        VersionId,
                        AssetId,
                        Pictures,
                        Size,
                        Metadata};
                this.Rows.Add(rowItemRow);
                return rowItemRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow FindByAssetId(string AssetId) {
                return ((ItemRow)(this.Rows.Find(new object[] {
                            AssetId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ItemDataTable cln = ((ItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ItemDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnContentId = base.Columns["ContentId"];
                this.columnTitle = base.Columns["Title"];
                this.columnVersionId = base.Columns["VersionId"];
                this.columnAssetId = base.Columns["AssetId"];
                this.columnPictures = base.Columns["Pictures"];
                this.columnSize = base.Columns["Size"];
                this.columnMetadata = base.Columns["Metadata"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnContentId = new System.Data.DataColumn("ContentId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContentId);
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnVersionId = new System.Data.DataColumn("VersionId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersionId);
                this.columnAssetId = new System.Data.DataColumn("AssetId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetId);
                this.columnPictures = new System.Data.DataColumn("Pictures", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPictures);
                this.columnSize = new System.Data.DataColumn("Size", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnMetadata = new System.Data.DataColumn("Metadata", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMetadata);
                this.Constraints.Add(new System.Data.UniqueConstraint("ItemsKey", new System.Data.DataColumn[] {
                                this.columnContentId}, false));
                this.Constraints.Add(new System.Data.UniqueConstraint("AssetIdKey", new System.Data.DataColumn[] {
                                this.columnAssetId}, true));
                this.columnContentId.AllowDBNull = false;
                this.columnContentId.Unique = true;
                this.columnAssetId.AllowDBNull = false;
                this.columnAssetId.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow NewItemRow() {
                return ((ItemRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ItemRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ItemRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ItemRowChanged != null)) {
                    this.ItemRowChanged(this, new ItemRowChangeEvent(((ItemRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ItemRowChanging != null)) {
                    this.ItemRowChanging(this, new ItemRowChangeEvent(((ItemRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ItemRowDeleted != null)) {
                    this.ItemRowDeleted(this, new ItemRowChangeEvent(((ItemRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ItemRowDeleting != null)) {
                    this.ItemRowDeleting(this, new ItemRowChangeEvent(((ItemRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveItemRow(ItemRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Content ds = new Content();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ItemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ItemInstanceDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnContentId;
            
            private System.Data.DataColumn columnFullPath;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemInstanceDataTable() {
                this.TableName = "ItemInstance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItemInstanceDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ItemInstanceDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContentIdColumn {
                get {
                    return this.columnContentId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullPathColumn {
                get {
                    return this.columnFullPath;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemInstanceRow this[int index] {
                get {
                    return ((ItemInstanceRow)(this.Rows[index]));
                }
            }
            
            public event ItemInstanceRowChangeEventHandler ItemInstanceRowChanging;
            
            public event ItemInstanceRowChangeEventHandler ItemInstanceRowChanged;
            
            public event ItemInstanceRowChangeEventHandler ItemInstanceRowDeleting;
            
            public event ItemInstanceRowChangeEventHandler ItemInstanceRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddItemInstanceRow(ItemInstanceRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemInstanceRow AddItemInstanceRow(ItemRow parentItemRowByFK_Item_ItemInstance, string FullPath) {
                ItemInstanceRow rowItemInstanceRow = ((ItemInstanceRow)(this.NewRow()));
                rowItemInstanceRow.ItemArray = new object[] {
                        parentItemRowByFK_Item_ItemInstance[0],
                        FullPath};
                this.Rows.Add(rowItemInstanceRow);
                return rowItemInstanceRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemInstanceRow FindByFullPath(string FullPath) {
                return ((ItemInstanceRow)(this.Rows.Find(new object[] {
                            FullPath})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ItemInstanceDataTable cln = ((ItemInstanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ItemInstanceDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnContentId = base.Columns["ContentId"];
                this.columnFullPath = base.Columns["FullPath"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnContentId = new System.Data.DataColumn("ContentId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContentId);
                this.columnFullPath = new System.Data.DataColumn("FullPath", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullPath);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnFullPath}, true));
                this.columnFullPath.AllowDBNull = false;
                this.columnFullPath.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemInstanceRow NewItemInstanceRow() {
                return ((ItemInstanceRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ItemInstanceRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ItemInstanceRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ItemInstanceRowChanged != null)) {
                    this.ItemInstanceRowChanged(this, new ItemInstanceRowChangeEvent(((ItemInstanceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ItemInstanceRowChanging != null)) {
                    this.ItemInstanceRowChanging(this, new ItemInstanceRowChangeEvent(((ItemInstanceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ItemInstanceRowDeleted != null)) {
                    this.ItemInstanceRowDeleted(this, new ItemInstanceRowChangeEvent(((ItemInstanceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ItemInstanceRowDeleting != null)) {
                    this.ItemInstanceRowDeleting(this, new ItemInstanceRowChangeEvent(((ItemInstanceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveItemInstanceRow(ItemInstanceRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Content ds = new Content();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ItemInstanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PictureDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnContentId;
            
            private System.Data.DataColumn columnFilename;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureDataTable() {
                this.TableName = "Picture";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PictureDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PictureDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContentIdColumn {
                get {
                    return this.columnContentId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FilenameColumn {
                get {
                    return this.columnFilename;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureRow this[int index] {
                get {
                    return ((PictureRow)(this.Rows[index]));
                }
            }
            
            public event PictureRowChangeEventHandler PictureRowChanging;
            
            public event PictureRowChangeEventHandler PictureRowChanged;
            
            public event PictureRowChangeEventHandler PictureRowDeleting;
            
            public event PictureRowChangeEventHandler PictureRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPictureRow(PictureRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureRow AddPictureRow(ItemRow parentItemRowByFK_Item_Picture, string Filename) {
                PictureRow rowPictureRow = ((PictureRow)(this.NewRow()));
                rowPictureRow.ItemArray = new object[] {
                        parentItemRowByFK_Item_Picture[0],
                        Filename};
                this.Rows.Add(rowPictureRow);
                return rowPictureRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PictureDataTable cln = ((PictureDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PictureDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnContentId = base.Columns["ContentId"];
                this.columnFilename = base.Columns["Filename"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnContentId = new System.Data.DataColumn("ContentId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContentId);
                this.columnFilename = new System.Data.DataColumn("Filename", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilename);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureRow NewPictureRow() {
                return ((PictureRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PictureRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PictureRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PictureRowChanged != null)) {
                    this.PictureRowChanged(this, new PictureRowChangeEvent(((PictureRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PictureRowChanging != null)) {
                    this.PictureRowChanging(this, new PictureRowChangeEvent(((PictureRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PictureRowDeleted != null)) {
                    this.PictureRowDeleted(this, new PictureRowChangeEvent(((PictureRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PictureRowDeleting != null)) {
                    this.PictureRowDeleting(this, new PictureRowChangeEvent(((PictureRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePictureRow(PictureRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Content ds = new Content();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PictureDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ItemRow : System.Data.DataRow {
            
            private ItemDataTable tableItem;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItemRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableItem = ((ItemDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContentId {
                get {
                    return ((string)(this[this.tableItem.ContentIdColumn]));
                }
                set {
                    this[this.tableItem.ContentIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tableItem.TitleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Title\' in table \'Item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItem.TitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VersionId {
                get {
                    try {
                        return ((string)(this[this.tableItem.VersionIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VersionId\' in table \'Item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItem.VersionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetId {
                get {
                    return ((string)(this[this.tableItem.AssetIdColumn]));
                }
                set {
                    this[this.tableItem.AssetIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Pictures {
                get {
                    try {
                        return ((short)(this[this.tableItem.PicturesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Pictures\' in table \'Item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItem.PicturesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Size {
                get {
                    try {
                        return ((int)(this[this.tableItem.SizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Size\' in table \'Item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItem.SizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Metadata {
                get {
                    try {
                        return ((string)(this[this.tableItem.MetadataColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Metadata\' in table \'Item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItem.MetadataColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitleNull() {
                return this.IsNull(this.tableItem.TitleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitleNull() {
                this[this.tableItem.TitleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVersionIdNull() {
                return this.IsNull(this.tableItem.VersionIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVersionIdNull() {
                this[this.tableItem.VersionIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPicturesNull() {
                return this.IsNull(this.tableItem.PicturesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPicturesNull() {
                this[this.tableItem.PicturesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tableItem.SizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tableItem.SizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMetadataNull() {
                return this.IsNull(this.tableItem.MetadataColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMetadataNull() {
                this[this.tableItem.MetadataColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureRow[] GetPictureRows() {
                return ((PictureRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Item_Picture"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemInstanceRow[] GetItemInstanceRows() {
                return ((ItemInstanceRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Item_ItemInstance"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ItemInstanceRow : System.Data.DataRow {
            
            private ItemInstanceDataTable tableItemInstance;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItemInstanceRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableItemInstance = ((ItemInstanceDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContentId {
                get {
                    try {
                        return ((string)(this[this.tableItemInstance.ContentIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContentId\' in table \'ItemInstance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemInstance.ContentIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullPath {
                get {
                    return ((string)(this[this.tableItemInstance.FullPathColumn]));
                }
                set {
                    this[this.tableItemInstance.FullPathColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow ItemRow {
                get {
                    return ((ItemRow)(this.GetParentRow(this.Table.ParentRelations["FK_Item_ItemInstance"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Item_ItemInstance"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContentIdNull() {
                return this.IsNull(this.tableItemInstance.ContentIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContentIdNull() {
                this[this.tableItemInstance.ContentIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PictureRow : System.Data.DataRow {
            
            private PictureDataTable tablePicture;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PictureRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePicture = ((PictureDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContentId {
                get {
                    try {
                        return ((string)(this[this.tablePicture.ContentIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ContentId\' in table \'Picture\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePicture.ContentIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filename {
                get {
                    try {
                        return ((string)(this[this.tablePicture.FilenameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Filename\' in table \'Picture\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePicture.FilenameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow ItemRow {
                get {
                    return ((ItemRow)(this.GetParentRow(this.Table.ParentRelations["FK_Item_Picture"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Item_Picture"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContentIdNull() {
                return this.IsNull(this.tablePicture.ContentIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContentIdNull() {
                this[this.tablePicture.ContentIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilenameNull() {
                return this.IsNull(this.tablePicture.FilenameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilenameNull() {
                this[this.tablePicture.FilenameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ItemRowChangeEvent : System.EventArgs {
            
            private ItemRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRowChangeEvent(ItemRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ItemInstanceRowChangeEvent : System.EventArgs {
            
            private ItemInstanceRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemInstanceRowChangeEvent(ItemInstanceRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemInstanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PictureRowChangeEvent : System.EventArgs {
            
            private PictureRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureRowChangeEvent(PictureRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PictureRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591